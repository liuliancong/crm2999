package com.callray.crm.workbench.mapper;

import com.callray.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Mar 14 10:32:40 CST 2023
     */
    int deleteByPrimaryKey(String id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Mar 14 10:32:40 CST 2023
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Mar 14 10:32:40 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Mar 14 10:32:40 CST 2023
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Mar 14 10:32:40 CST 2023
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 插入市场活动
     * @param activity 市场活动对象
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动的列表
     * @param map 条件
     * @return 活动记录的数组
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动总数
     * @param map 条件
     * @return 记录总数
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id批量删除市场活动
     * @param ids id的数组
     * @return 删除数量
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 通过id查询出活动
     * @param id 活动id
     * @return 活动记录
     */
    Activity selectActivityById(String id);

    /**
     * 根据id修改活动记录
     * @param activity 提交的活动数据
     * @return 0表示修改失败，1表示修改正常
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有的活动记录
     * @return 所有的活动记录
     */
    List<Activity> selectAllActivity();

    /**
     * 查询所有的活动记录
     * @return 所有的活动记录
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 插入多条活动记录
     * @param activityList 活动记录集合
     * @return 插入记录数
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 通过id查询市场活动的所有信息
     * @param id id
     * @return 市场活动
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 查询与clueId关联的activity
     * @param clueId clueId
     * @return activityList
     */
    List<Activity> selectActivityForDetailClueByClueId(String clueId);

    /**
     * 根据activityName模糊查询,并排除与clueId关联过的activity
     * @param map
     * @return
     */
    List<Activity> selectActivityByActivityNameClueId(Map<String,Object> map);

    /**
     * 通过ids数组查询活动信息
     * @param ids ids
     * @return activityList
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据活动名称和线索id查询活动信息
     * @param map activityName & clueId
     * @return activityList
     */
    List<Activity> selectActivityForConvertByActivityNameClueId(Map<String,Object> map);

    /**
     * 通过活动名称查询活动信息
     * @param activityName 活动名称
     * @return activityList
     */
    List<Activity> selectActivityByActivityName(String activityName);
}